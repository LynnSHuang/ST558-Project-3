shiny::runApp()
runApp()
Q
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
## Load data from CSV file first
elections <- read_csv(file = "./1992Election.csv", col_names = TRUE)
# Remove the msa, pmsa NA-containing cols
elections <- elections %>% select(-msa, -pmsa)
# Add classification column of D/R/P winner by largest percentage
elections$winner <- "D"
elections$winner[elections$republican > elections$democrat] <- "R"
elections$winner[elections$Perot > elections$republican] <- "P"
## Load data from CSV file first
elections <- read_csv(file = "./1992Election.csv", col_names = TRUE)
# Remove the msa, pmsa NA-containing cols
elections <- elections %>% select(-msa, -pmsa)
# Add classification column of D/R/P winner by largest percentage
elections$winner <- "D"
elections$winner[elections$republican > elections$democrat] <- "R"
elections$winner[elections$Perot > elections$republican] <- "P"
elections <- elections %>% select(winner != "P")
elections <- elections %>% filter(winner != "P")
## Load data from CSV file first
elections <- read_csv(file = "./1992Election.csv", col_names = TRUE)
# Remove the msa, pmsa NA-containing cols
elections <- elections %>% select(-msa, -pmsa)
# Add classification column of D/R/P winner by largest percentage
elections$winner <- "D"
elections$winner[elections$republican > elections$democrat] <- "R"
elections$winner[elections$Perot > elections$republican] <- "P"
elections %>% filter(winner == "P")
vars <- c("region","pop","age6574","college","income","white")
elections %>% select(vars)
elections <- elections %>% filter(winner != "P")
elections %>% select(vars)
df.model <- elections %>% select(vars)
nTrees=100
runApp()
runApp()
runApp()
spec(...)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
o.mlr <- lm(democrat ~ ., data=df.Sup)
o.mlr <- lm(democrat ~ ., data=df.Sup)
df.Sup <- df.model
o.mlr <- lm(democrat ~ ., data=df.Sup)
df.Sup <- elections %>% select(vars, democrat)
o.mlr <- lm(democrat ~ ., data=df.Sup)
summary(o.mlr)
runApp()
runApp()
runApp()
runApp()
library(caret)
runApp()
library(caret)
runApp()
runApp()
runApp()
runApp()
runApp()
rm(df.model)
trainIndex <- sample(1:nrow(df.Sup), size=nrow(df.Sup)*0.80)
trainData <- df.Sup[trainIndex, ]
testData <- df.Sup[-trainIndex, ]
preProc <- preProcess(trainData, method=c("center", "scale"))
train <- predict(preProc, trainData)
test <- predict(preProc, testData)
o.mlr <- train(democrat ~ ., data=train, method="lm", trControl=trainControl(method="cv", number=5))
summary(o.mlr)
pred.mlr <- predict(o.mlr, newData=test)
# Make factors
elections$region <- as.factor(elections$region)
elections$county <- as.factor(elections$county)
elections$state <- as.factor(elections$state)
elections$winner <- as.factor(elections$winner)
df <- elections %>% select(vars, democrat)
trainData <- df[trainIndex, ]
testData <- df[-trainIndex, ]
preProc <- preProcess(trainData, method=c("center", "scale"))
train <- predict(preProc, trainData)
test <- predict(preProc, testData)
o.mlr <- train(democrat ~ ., data=train, method="lm", trControl=trainControl(method="cv", number=5))
pred.mlr <- predict(o.mlr, newData=test)
pred.mlr
help(predict)
pred.mlr <- predict(o.mlr, newdata=test)
pred.mlr
rmse.mlr <- sqrt(mean((test$democrat - pred.mlr)^2))
rmse.mlr
runApp()
df2 <- elections %>% select(vars, winner)
trainData2 <- df2[trainIndex, ]
testData2 <- df2[-trainIndex, ]
preProc2 <- preProces(trainData2, method=c("center", "scale"))
preProc2 <- preProcess(trainData2, method=c("center", "scale"))
train2 <- predict(preProc2, trainData2)
test2 <- predict(preProc2, testData2)
o.boost <- train(winner ~ ., data=train2, method="gbm", family="bernoulli",)
o.boost <- train(winner ~ ., data=train2, method="gbm", family="bernoulli",
trControl=trainControl(method="cv", repeats=5),
tuneGrid=expand.grid(interaction.depth=c(1, 3, 5), n.trees=100, shrinkage=c(0.01, 0.05, 0.1)))
tG=expand.grid(interaction.depth=c(1, 3, 5), n.trees=100, shrinkage=c(0.01, 0.05, 0.1)), n.minobsinnode=1)
tG=expand.grid(interaction.depth=c(1, 3, 5), n.trees=100, shrinkage=c(0.01, 0.05, 0.1), n.minobsinnode=1)
tC=trainControl(method="cv", number=5)
o.boost <- train(winner ~ ., data=train2, method="gbm", family="bernoulli", trControl=tC, tuneGrid=tG)
o.boost <- train(winner ~ ., data=train2, method="gbm", family="bernoulli")
warnings()
help(gbm.train)
??train
help(train)
boostFit <- gbm(winneer~.,train2,distribution="bernoulli",n.trees=100,shrinkage=0.1,interaction.depth=3)
library(gbm)
boostFit <- gbm(winneer~.,train2,distribution="bernoulli",n.trees=100,shrinkage=0.1,interaction.depth=3)
boostFit <- gbm(winner~.,train2,distribution="bernoulli",n.trees=100,shrinkage=0.1,interaction.depth=3)
elections$winner <- ifelse(elections$winner=="D", 1, 0)
f2 <- elections %>% select(vars, winner)
trainData2 <- df2[trainIndex, ]
testData2 <- df2[-trainIndex, ]
preProc2 <- preProcess(trainData2, method=c("center", "scale"))
train2 <- predict(preProc2, trainData2)
test2 <- predict(preProc2, testData2)
df2 <- f2
rm(f2)
boostFit <- gbm(winner~.,train2,distribution="bernoulli",n.trees=100,shrinkage=0.1,interaction.depth=3)
gbm(winner ~ . train2, distribution="gaussian", n.trees=100, shrinkage=0.1, interaction.depth=3)
gbm(winner ~ ., train2, distribution="gaussian", n.trees=100, shrinkage=0.1, interaction.depth=3)
summary(gbm)
rm(df2, preProc2, test2, testData2, train2, trainData2)
o.boost <- train(winner ~ ., data=train, method="gbm", family="gaussian", trControl=tC, tuneGrid=tG)
o.boost <- train(democrat ~ ., data=train, method="gbm", family="gaussian", trControl=tC, tuneGrid=tG)
warnings()
gbm(democrat ~ ., data=train, distribution="gaussian", n.trees=1000, shrinkage=0.1, interaction.depth=2)
expand.grid(interaction.depth=c(1, 3, 5),
n.trees=1000,
shrinkage=c(0.01, 0.05, 0.1))
tC=trainControl(method="cv", number=5)
tG=data.frame(expand.grid(interaction.depth=c(1, 3, 5), n.trees=1000, shrinkage=c(0.01, 0.05, 0.1), n.minobsinnode=c(1,2,3)))
tG
tG=data.frame(expand.grid(interaction.depth=c(1, 5), n.trees=1000, shrinkage=c(0.01, 0.1), n.minobsinnode=c(1,2)))
tG
o.boost <- train(democrat ~ ., data=train, method="gbm", family="gaussian", trControl=tC, tuneGrid=tG)
warnings()
o.boost <- train(democrat ~ ., data=train, method="gbm", distribution="gaussian", trControl=tC, tuneGrid=tG)
tG=data.frame(expand.grid(interaction.depth=c(1,3,5), n.trees=1000, shrinkage=c(0.01,0.05,0.1), n.minobsinnode=c(1,2,3)))
o.boost <- train(democrat ~ ., data=train, method="gbm", distribution="gaussian", trControl=tC, tuneGrid=tG)
o.boost$bestTune
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
elections.raw <- read_csv(file = "./1992Election.csv", col_names = TRUE)
runApp()
runApp()
runApp()
'region' in vars
'region' %in% vars
runApp()
runApp()
rm(list=ls())
runApp()
